CS685 Assignment 1 Readme file  
-------------------------------

Python packages required :

json		: to manage data
csv		: to manage data
pandas 	: for dataset handling
numpy 		: support for calculations
datetime 	: for traversing weekly and monthly
xlrd		: to access excel file

--> Dataset Used:
	districts.csv -> for cases in each district
	vaccination_data_district_wise.csv  -> For vaccination in each district on perticular dates
	neighbor-district.json  -> used for district and its neighbor districts
	DDW_PCA0000_2011_Indiastatedist.xlsx  ->  population data for district ,State ,India


1. File included:
 
 ->shell scripts to each program

 1.1 	neighbor-districts-modified.sh
 1.2	edge-generator.sh
 1.3	case-generator.sh
 1.4	peaks-generator.sh
 1.5    vaccinated-count-generator.sh
 1.6  	vaccination-population-ratio-generator.sh
 1.7 	vaccine-type-ratio-generator.sh
 1.8	vaccinated-ratio-generator.sh
 1.9	complete-vaccination-generator.sh


2.  to run .py programs Files:
 1.1   Q1.py
 1.2   Q2.py
 1.3   Q3.py
 1.4   Q4.py
 1.5   Q5.py
 1.6   Q6.py
 1.7   Q7.py
 1.8   Q8.py
 1.9   Q9.py


3.  Install below dependancies :-

	python3- $ sudo apt-get install python3.6
	pandas - $ pip install pandas
	numpy -  $ pip install numpy
        matplotlib - $ pip install matplotlib
        xlrd -   $ pip install xlrd
        openpyxl - $ pip install openpyxl
(Optional) conda - $ pip install conda


To run the program from the top, a separate script is provided. Please run $ ./assign1.sh. 
To run some individual program, please run the shell scripts in the top down order as listed in section 1 as some programs require supporting files which will be generated by some predecessing program. 


4.  Report
----------------------------------------
1.1  ./neighbor-districts-modified.sh
        -> it run Q1.py 
        ->cleaning neighbor-district.json file by running Q1.py or neighbor-districts-modified.sh script 
        ->output :- neighbor-district-modified.json 


1.2  ./edge-generator.sh 
        ->it run Q2.py
        ->it use neighbor-district-modified.json 
        ->output :- edge-graph.csv  

1.3  ./case-generator.sh 
        ->it run Q3.py
	-> it uses neighbor-district-modifed.json file and district.csv for cases data
	-> output :- case-week.csv , case-month.csv , case-overall.csv 

1.4  ./peaks-generator.sh 
        ->it run Q4.py
	-> it uses neighbor-district-modifed.json file and district.csv for cases data
        -> it also generate intermediate files Q4-monthly.csv and q4_week.csv (which help to find peaks)
        ->-> output :- district-peaks.csv , state-peaks.csv , overall-peaks.csv 

1.5  ./vaccinated-count-generator.sh
        -> it run Q5.py
        -> it uses vaccination_data_district_wise.csv and neighbor-district-modifed.json files
        -> output :- district-vaccinated-count-week.csv , state-vaccinated-count-week.csv ,
                    district-vaccinated-count-month.csv , state-vaccinated-count-month.csv,
                    district-vaccinated-count-overall.csv , state-vaccinated-count-overall.csv

1.6 ./vaccination-population-ratio-generator.sh
        ->it run Q6.py
        -> it uses DDW_PCA0000_2011_Indiastatedist.xlsx , vaccination_data_district_wise.csv and neighbor-district-modifed.json files
         ->file sorted by ascending order according to final ratio.
        -> output :- district-vaccination-population-ratio.csv
                     state-vaccination-population-ratio.csv
                     overall-vaccination-population-ratio.csv

1.7 ./vaccine-type-ratio-generator.sh
        ->it run Q7.py
        -> it uses vaccination_data_district_wise.csv and neighbor-district-modifed.json files
        -> "inf" represent covaxin=0 hence consider ratio is infinity.
        ->file sorted by ascending order according to vaccineratio.
        -> output :- district-vaccination-type-ratio.csv
                     state-vaccination-type-ratio.csv
                     Overall-vaccination-type-ratio.csv

1.8 ./vaccinated-ratio-generator.sh
        ->it run Q8.py
        -> it uses DDW_PCA0000_2011_Indiastatedist.xlsx , vaccination_data_district_wise.csv and neighbor-district-modifed.json files
        ->file sorted by ascending order according to dose-1 ratio.
        -> output :- district-vaccinated-dose-ratio.csv
                     state-vaccinated-dose-ratio.csv
                     overall-vaccinated-dose-ratio.csv

1.9 ./complete-vaccination-generator.sh
        ->it run Q9.py
        -> it uses DDW_PCA0000_2011_Indiastatedist.xlsx , vaccination_data_district_wise.csv and neighbor-district-modifed.json files
        -> output :- complete-vaccination.csv


1.10 ./assign1.sh 
        -> to run entire assignment1
